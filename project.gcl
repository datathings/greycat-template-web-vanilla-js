@library("std", "7.0.1363-dev");
@library("web", "7.0.271-dev");
@library("explorer", "7.0.22-dev");

var names: nodeIndex<String, nodeList<String>>;

fn main(){
    if(names.size()==0){
        for(var i=0;i<100;i++){
            var sub = nodeList<String>{};
            for(var j=0;j<100;j++){
                sub.add("sub_${i}_${j}");
            }
            names.set("main_${i}", sub);
        }
    }
}

@volatile
type Filters {
    min: int;
    max: int;
    main: String;
    sub: String;
}

@volatile
type TableLine {
    a: int;
    b: int;
    c: String;
    d: String;
}

@expose
fn get_all_names(): Array<String>{
    var res = Array<String>{};
    for(k,_ in names){
       res.add(k); 
    }
    return res;
}

@expose
fn get_sub_names_by_name(name: String?): Array<String>{
    var res = Array<String>{};
    if(name != null){
        for(_, v in names.get(name)?){
            res.add(v);
        }
    }
    return res;
}

@expose
fn fake_table(f: Filters) : Array<TableLine> {
    var res = Array<TableLine>{};
    var r = Random{seed: 123456};
    for(var i=0;i<1000;i++){
        res.add(
            TableLine{
                a: r.uniform(f.min,f.max),
                b: r.uniform(f.min,f.max),
                c: "${f.main}_${r.uniform(f.min,f.max)}",
                d: "${f.sub}_${r.uniform(f.min,f.max)}" 
            });
    }
    return res;
}